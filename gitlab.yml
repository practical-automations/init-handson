- hosts: localhost
  gather_facts: false

  tasks:
  - name: (gitlab) set personal token
    shell: |
      gitlab_host="http://gitlab"
      gitlab_user="root"
      gitlab_password="password"
      body_header=$(curl -c /tmp/cookies.txt -i "${gitlab_host}/users/sign_in" -s)
      csrf_token=$(echo $body_header | perl -ne 'print "$1\n" if /new_user.*?authenticity_token"[[:blank:]]value="(.+?)"/' | sed -n 1p)
      curl -b /tmp/cookies.txt -c /tmp/cookies.txt -i "${gitlab_host}/users/sign_in" \
           --data "user[login]=${gitlab_user}&user[password]=${gitlab_password}" \
           --data-urlencode "authenticity_token=${csrf_token}"
      body_header=$(curl -H 'user-agent: curl' -b /tmp/cookies.txt -i "${gitlab_host}/profile/personal_access_tokens" -s)
      csrf_token=$(echo $body_header | perl -ne 'print "$1\n" if /authenticity_token"[[:blank:]]value="(.+?)"/' | sed -n 1p)
      body_header=$(curl -L -b /tmp/cookies.txt "${gitlab_host}/profile/personal_access_tokens" \
                         --data-urlencode "authenticity_token=${csrf_token}" \
                         --data 'personal_access_token[name]=golab-generated&personal_access_token[expires_at]=&personal_access_token[scopes][]=api')
      personal_access_token=$(echo $body_header | perl -ne 'print "$1\n" if /created-personal-access-token"[[:blank:]]value="(.+?)"/' | sed -n 1p)
      crudini --set ~/.python-gitlab.cfg main private_token ${personal_access_token}
    args:
      creates: /tmp/cookies.txt

  - name: (gitlab-ruuner) already configured runners?
    command: docker exec gitlab-runner gitlab-runner list
    register: configured_runners
    changed_when: False

  - name: (gitlab-runner) register runner
    shell: |
      RUNNER_TOKEN=token-AABBCCDD
      docker exec gitlab-runner \
             gitlab-runner register \
             --non-interactive \
             --url http://gitlab \
             --registration-token ${RUNNER_TOKEN} \
             --description pai-gitlab-runner-molecule \
             --tag-list molecule \
             --executor docker \
             --locked=false \
             --docker-image irixjp/pai-molecule:latest \
             --docker-helper-image irixjp/pai-gitlab-runner-helper:x86_64-6214287e \
             --clone-url http://gitlab/ \
             --docker-volumes /var/run/docker.sock:/var/run/docker.sock \
             --docker-privileged=true \
             --docker-network-mode bootstrap_infraci_nw
    when:
      - configured_runners.stderr.find('\npai-gitlab-runner-molecule') == -1

  - name: (gitlab) group automation already exist?
    shell: gitlab group list --search automation | grep automation
    register: created_user_automation
    ignore_errors: True
    changed_when: False

  - name: (gitlab) add automation group
    shell: gitlab group create --name automation --path automation --visibility public
    when:
      - created_user_automation.rc != 0

  - name: (gitlab) user reviewer already exist?
    shell: gitlab user list --search reviewer | grep username
    register: created_user_reviewer
    ignore_errors: True
    changed_when: False

  - name: (gitlab) add reviewer user
    shell: >-
      gitlab user create
      --username reviewer
      --name reviewer
      --password reviewer
      --email reviewer@localhost
      --skip-confirmation true
    when:
      - created_user_reviewer.rc != 0

  - name: (gitlab) user developer already exist?
    shell: gitlab user list --search developer | grep username
    register: created_user_developer
    ignore_errors: True
    changed_when: False

  - name: (gitlab) add developer user
    shell: >-
      gitlab user create
      --username developer
      --name developer
      --password developer
      --email developer@localhost
      --skip-confirmation true
    when:
      - created_user_developer.rc != 0

  - name: (gitlab) user reviewer already belong to group automation?
    shell: |
      GROUP_ID=$(gitlab group list --search automation | yq .id)
      gitlab -o yaml group-member list --group-id ${GROUP_ID:?} | yq -r '.[] | select(.username == "reviewer") | .username' | grep reviewer
    register: belong_user_reviewer
    ignore_errors: True
    changed_when: False

  - name: (gitlab) user reviewer add to group automation
    shell: |
      USER_ID=$(gitlab user list --username reviewer | yq .id)
      GROUP_ID=$(gitlab group list --search automation | yq .id)
      gitlab group-member create --group-id ${GROUP_ID:?} --user-id ${USER_ID:?} --access-level 40
    when:
      - belong_user_reviewer.rc != 0

  - name: (gitlab) user developer already belong to group automation?
    shell: |
      GROUP_ID=$(gitlab group list --search automation | yq .id)
      gitlab -o yaml group-member list --group-id ${GROUP_ID:?} | yq -r '.[] | select(.username == "developer") | .username' | grep developer
    register: belong_user_developer
    ignore_errors: True
    changed_when: False

  - name: (gitlab) user developer add to group automation
    shell: |
      USER_ID=$(gitlab user list --username developer | yq .id)
      GROUP_ID=$(gitlab group list --search automation | yq .id)
      gitlab group-member create --group-id ${GROUP_ID:?} --user-id ${USER_ID:?} --access-level 30
    when:
      - belong_user_developer.rc != 0
